/*
 * Copyright (c) 2010 - 2015 Ushahidi Inc
 * All rights reserved
 * Contact: team@ushahidi.com
 * Website: http://www.ushahidi.com
 * GNU Lesser General Public License Usage
 * This file may be used under the terms of the GNU Lesser
 * General Public License version 3 as published by the Free Software
 * Foundation and appearing in the file LICENSE.LGPL included in the
 * packaging of this file. Please review the following information to
 * ensure the GNU Lesser General Public License version 3 requirements
 * will be met: http://www.gnu.org/licenses/lgpl.html.
 *
 * If you have questions regarding the use of this file, please contact
 * Ushahidi developers at team@ushahidi.com.
 */

apply plugin: 'com.android.application'
//apply plugin: 'me.tatarka.retrolambda'

def isTravis = "true".equals(System.getenv("TRAVIS"))

def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

def globalConfiguration = rootProject.extensions.getByName("ext")

android {
    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    buildTypes {

        release {
            minifyEnabled false
            shrinkResources false
            // Library specific proguard files
            proguardFile 'proguard-gson.pro'
            proguardFile 'proguard-square-okio.pro'
            proguardFile 'proguard-square-okhttp.pro'
            proguardFile 'proguard-square-otto.pro'
            proguardFile 'proguard-google-analytics.pro'

            // Default proguard files
            proguardFile 'proguard-project.pro'
            proguardFile getDefaultProguardFile('proguard-android.txt')
        }

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-DEBUG"
            debuggable true
        }
    }

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")
        testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")

        testApplicationId "org.addhen.smssync.tests"
        applicationId "org.addhen.smssync"
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "tier"

    productFlavors {
        noAnalytics {
            dimension "tier"
            applicationId 'org.addhen.smssync'
        }
    }

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries = preDexEnabled && !isTravis
        incremental = true;
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    if (project.hasProperty('signingStoreLocation') &&
            project.hasProperty('signingStorePassword') &&
            project.hasProperty('signingKeyAlias') &&
            project.hasProperty('signingKeyPassword')) {
        println "Found sign properties in gradle.properties! Signing buildâ€¦"

        signingConfigs {
            release {
                storeFile file(signingStoreLocation)
                storePassword signingStorePassword
                keyAlias signingKeyAlias
                keyPassword signingKeyPassword
            }
        }

        buildTypes.release.signingConfig = signingConfigs.release
    } else {
        buildTypes.release.signingConfig = null
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')
    def appDependencies = rootProject.ext.appDependencies
    def appTestDependencies = rootProject.ext.appTestDependencies
    annotationProcessor appDependencies.daggerCompiler // Needed for source code generation
    annotationProcessor appDependencies.butterKnifeComplier
    implementation appDependencies.raiburari
    implementation appDependencies.cupboard
    implementation appDependencies.butterKnife
    implementation appDependencies.wakeful
    implementation appDependencies.okHttp
    implementation appDependencies.nineOldAndroids
    implementation appDependencies.loggingInterceptor
    implementation appDependencies.bottomSheet
    implementation appDependencies.supportPreference
    implementation appDependencies.timber
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'io.reactivex:rxjava:1.3.4'
    implementation 'com.android.support:support-v4:25.3.1'
    compileOnly appDependencies.javaxAnnotation // Needed to resolve compilation errors

    // Test depedencies
    testImplementation appTestDependencies.junit
    testImplementation appTestDependencies.mockito
    testImplementation appTestDependencies.mockWebServer
    testAnnotationProcessor appDependencies.daggerCompiler

    androidTestImplementation appTestDependencies.mockito
    androidTestImplementation appTestDependencies.dexmaker
    androidTestImplementation appTestDependencies.dexmakerMockito
    androidTestAnnotationProcessor appDependencies.daggerCompiler
}
